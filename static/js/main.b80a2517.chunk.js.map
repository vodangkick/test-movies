{"version":3,"sources":["components/Movie.js","components/Movies.js","pages/MoviesList.js","components/MoviesDetailItem.js","pages/MovieDetail.js","App.js","serviceWorker.js","index.js"],"names":["Course","props","movie","id","title","overview","poster_path","Col","Card","className","Body","CardImg","top","width","src","alt","Title","Text","to","Movies","numberPagesNew","prevNumberPaging","nextNumberPaging","currentPage","handleClick","nextPaging","prevPaging","INPUT_DATA","gql","numberEnd","Math","ceil","TOTAL_PAGE","pageNumbers","i","push","length","splice","renderPageNumbers","map","number","key","onClick","e","Row","md","query","loading","error","data","nowPlaying","movies","item","aria-label","class","MoviesList","state","todosPerPage","sortData","numberStart","bind","sortFilter","filterData","event","console","log","target","this","setState","Number","value","reverse","sort","Container","Component","MoviesDetailItem","MovieDetail","match","params","Spinner","animation","variant","Alert","details","client","ApolloClient","uri","App","path","process","exact","component","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b80a2517.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, Col, CardImg } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Course(props) {\r\n    const { id, title, overview, poster_path } = props.movie;\r\n    return (\r\n        <Col>\r\n            <Card className=\"item-gird\">\r\n                <Card.Body>\r\n                    <CardImg top width=\"100%\" src={poster_path} alt=\"Card image cap\" />\r\n                    <Card.Title>{title}</Card.Title>\r\n                    <Card.Text>\r\n                        {overview}\r\n                    </Card.Text>\r\n                    <Link className=\"btn btn-danger\" to={`/movie/${id}`}>Read More</Link>\r\n                </Card.Body>\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport Movie from './Movie';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nfunction Movies(props) {\r\n    const { numberPagesNew, prevNumberPaging, nextNumberPaging, currentPage, handleClick,\r\n        nextPaging, prevPaging } = props;\r\n    const TOTAL_PAGE = 32;\r\n    let COUNT = 10;\r\n    const INPUT_DATA = gql`{\r\n            nowPlaying(page:${currentPage}){\r\n                movies{\r\n                  id\r\n                  title,\r\n                  overview,\r\n                  poster_path\r\n                }\r\n              }\r\n    }`;\r\n    let numberEnd = Math.ceil(TOTAL_PAGE % 10);\r\n    let pageNumbers = [];\r\n    for (let i = 1; i <= COUNT; i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    if (numberPagesNew.length > 0) {\r\n        if (numberEnd < COUNT && numberPagesNew[9] > 32) {\r\n            pageNumbers = [...numberPagesNew];\r\n            pageNumbers.splice(numberEnd, 8);\r\n        } else {\r\n            pageNumbers = [...numberPagesNew];\r\n        }\r\n    }\r\n    const renderPageNumbers = pageNumbers.map(number => {\r\n        return (\r\n            <>\r\n                <li className={currentPage === number ? \"page-item active\" : \"page-item\"} key={number}  >\r\n                    <span className=\"page-link\" id={number} onClick={(e) => handleClick(e)} > {number}</span></li>\r\n            </>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Row md={4} className=\"list-group-movie\" >\r\n                <Query query={INPUT_DATA}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return <p>Loading ...</p>;\r\n                        if (error) return <p>Error :(</p>;\r\n                        const dataNew = data.nowPlaying.movies;\r\n                        return (\r\n                            dataNew.map(item => <Movie movie={item} />)\r\n                        );\r\n                    }\r\n                    }\r\n                </Query >\r\n            </Row>\r\n            {\r\n                pageNumbers.length > 1 ?\r\n                    <nav aria-label=\"Page navigation example\">\r\n                        <ul class=\"pagination\">\r\n                            {currentPage > 1 ? <li className=\"page-item\" onClick={() => prevPaging()}><span className=\"page-link\">Previous</span></li> : \"\"}\r\n                            {pageNumbers[0] > 1 ? <li className=\"page-item\" onClick={() => prevNumberPaging(pageNumbers)}><span className=\"page-link\">...</span></li> : \"\"}\r\n                            {renderPageNumbers}\r\n                            {pageNumbers[9] < TOTAL_PAGE ? <li className=\"page-item\" onClick={() => nextNumberPaging(pageNumbers)}><span className=\"page-link\">...</span></li> : \"\"}\r\n                            {currentPage <= pageNumbers.length ? <li onClick={() => nextPaging()}><span className=\"page-link\">Next</span></li> : \"\"}\r\n                        </ul>\r\n                    </nav>\r\n                    : ''\r\n            }\r\n\r\n\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Movies;","import React, { Component } from 'react'\r\nimport { Container } from 'react-bootstrap';\r\nimport Movies from '../components/Movies';\r\n\r\nexport default class MoviesList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            currentPage: 1,\r\n            todosPerPage: 20,\r\n            sortData: 'asc',\r\n            numberStart: 1,\r\n            numberEnd: 10,\r\n            numberPagesNew: []\r\n\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.nextPaging = this.nextPaging.bind(this);\r\n        this.prevPaging = this.prevPaging.bind(this);\r\n        this.sortFilter = this.sortFilter.bind(this);\r\n        this.filterData = this.filterData.bind(this);\r\n        this.nextNumberPaging = this.nextNumberPaging.bind(this);\r\n        this.prevNumberPaging = this.prevNumberPaging.bind(this);\r\n    }\r\n    handleClick(event) {\r\n        console.log(event.target.id);\r\n        this.setState({\r\n            currentPage: Number(event.target.id)\r\n        });\r\n    }\r\n    nextPaging() {\r\n        let currentPage = this.state.currentPage;\r\n        this.setState({\r\n            currentPage: currentPage + 1\r\n        })\r\n    }\r\n    prevPaging() {\r\n        let currentPage = this.state.currentPage;\r\n\r\n        this.setState({\r\n            currentPage: currentPage - 1\r\n        })\r\n    }\r\n    nextNumberPaging(pageNumbers) {\r\n        pageNumbers = pageNumbers.map(item => item + 10);\r\n        this.setState({\r\n            numberPagesNew: pageNumbers\r\n        })\r\n    }\r\n    prevNumberPaging(pageNumbers) {\r\n        pageNumbers = pageNumbers.map(item => item - 10);\r\n        this.setState({\r\n            numberPagesNew: pageNumbers\r\n        })\r\n\r\n    }\r\n\r\n    /// sort\r\n    sortFilter(event) {\r\n        const value = event.target.value;\r\n        console.log(value);\r\n        this.setState({\r\n            sortData: value\r\n        })\r\n    }\r\n    filterData(data) {\r\n        console.log(this.state.sortData);\r\n        if (this.state.sortData === 'desc') {\r\n            data.reverse();\r\n        } else if (this.state.sortData === 'desc') {\r\n            data.sort();\r\n        }\r\n        return data;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" >\r\n                <h1 className=\"list-page text-center\">List Page</h1>\r\n                <Container>\r\n                    <Movies\r\n                        {...this.state}\r\n                        handleClick={this.handleClick}\r\n                        nextPaging={this.nextPaging}\r\n                        prevPaging={this.prevPaging}\r\n                        sortFilter={this.sortFilter}\r\n                        filterData={this.filterData}\r\n                        nextNumberPaging={this.nextNumberPaging}\r\n                        prevNumberPaging={this.prevNumberPaging}\r\n\r\n                    />\r\n\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\n\r\nexport default function MoviesDetailItem({ item }) {\r\n    const { title, poster_path, overview } = item;\r\n    return (\r\n        <div className=\"detail-movies\">\r\n            <h1>{title}</h1>\r\n            <img src={poster_path} alt={title} />\r\n            <p>{overview}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport gql from 'graphql-tag';\r\nimport MoviesDetailItem from '../components/MoviesDetailItem';\r\nimport { Spinner, Alert } from 'react-bootstrap';\r\n\r\nexport default function MovieDetail(props) {\r\n    const INPUT_DATA = gql`{\r\n        details(movieId:${props.match.params.id}){\r\n            id\r\n            title\r\n            poster_path\r\n            overview\r\n        }\r\n    }`;\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Query query={INPUT_DATA}>\r\n                    {({ loading, error, data }) => {\r\n                        if (loading) return <Spinner animation=\"border\" variant=\"primary\" />;\r\n                        if (error) return <Alert variant={error}></Alert>;\r\n                        return (\r\n                            <MoviesDetailItem item={data.details} />\r\n                        );\r\n                    }\r\n                    }\r\n                </Query >\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MoviesList from './pages/MoviesList';\nimport MovieDetail from './pages/MovieDetail';\n\nimport { BrowserRouter as Switch, Route } from 'react-router-dom';\nconst client = new ApolloClient({\n  uri: \"https://ion-movies.herokuapp.com\"\n});\n\nfunction App() {\n  return (\n    <>\n      <Switch>\n        <ApolloProvider client={client}>\n\n          <Route path={process.env.PUBLIC_URL + '/'} exact component={MoviesList} />\n          <Route path=\"/movie/:id\" exact component={MovieDetail} />\n\n        </ApolloProvider>\n      </Switch>\n    </>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}